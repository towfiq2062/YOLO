# -*- coding: utf-8 -*-
"""
Created on Wed Oct 30 15:27:25 2024

@author: mrahman8
"""

import cv2
import numpy as np
import os

# Source directory containing subdirectories with depth files
src_directory = r"C:\Users\mrahman8\Desktop\Grayscale\depth"  # Update this path
out_root_directory = r"C:\Users\mrahman8\Desktop\Grayscale\gray"  # Update this path

# Define the structuring element
SE = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))

# Create a log file to track processed directories
log_file_path = os.path.join(out_root_directory, 'processed_directories.txt')
with open(log_file_path, 'w') as log_file:
    log_file.write("Processed Directories:\n")

# Walk through all subdirectories and files in the source directory
for root, _, files in os.walk(src_directory):
    for filename in files:
        if filename.endswith('.txt'):
            # Form the output subdirectory path
            relative_subdir = os.path.relpath(root, src_directory)
            output_subdir = os.path.join(out_root_directory, relative_subdir)
            os.makedirs(output_subdir, exist_ok=True)

            # Output file path
            filename_out = os.path.splitext(filename)[0] + '.png'
            output_file_path = os.path.join(output_subdir, filename_out)

            if os.path.exists(output_file_path):
                print(f"Skipping {filename_out} (already exists)")
                continue

            # Load depth data from file
            depth_data = np.loadtxt(os.path.join(root, filename), delimiter=',')

            # Apply thresholding (optional)
            depth_data[np.logical_or(depth_data < 1500, depth_data > 2700)] = 0

            # Normalize to 16-bit range (0â€“65535)
            depth_normalized = np.clip((depth_data - 1500) / (2700 - 1500), 0, 1)
            grayscale_image = (depth_normalized * 65535).astype(np.uint16)  # 16-bit conversion

            # Save as 16-bit grayscale PNG
            cv2.imwrite(output_file_path, grayscale_image)  # OpenCV handles uint16 as 16-bit
            print(f"Processed {filename_out}")

    # Log the processed directory
    with open(log_file_path, 'a') as log_file:
        log_file.write(f"{root}\n")

print("Processing completed for all files.")
